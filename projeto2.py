# -*- coding: utf-8 -*-
"""projeto2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i2rLthVwqEl7YZzvmGpc4oHcpV8voLlN

Referências:
criar: https://networkx.org/documentation/networkx-1.9/tutorial/tutorial.html<br>
qual tipo usar: https://networkx.org/documentation/networkx-1.9/reference/<br>classes.html -> acho que no nosso caso é digraph<br>
introdução: https://networkx.org/documentation/networkx-1.9/reference/introduction.html<br>
exemplos de algoritmos: https://networkx.org/documentation/networkx-1.9/examples/index.html<br>
mais: https://networkx.org/documentation/networkx-1.9/reference/index.html<br>
Sobre tt: https://medium.com/web-mining-is688-spring-2021/twitter-networkx-graph-analysis-cef99c23fce9<br>
https://medium.com/future-vision/visualizing-twitter-interactions-with-networkx-a391da239af5<br>
https://bertwagner.com/posts/using-pythons-networkx-for-twitter-graph-analysis/<br>
"""

from operator import itemgetter
import networkx as nx
from networkx.algorithms import community

from google.colab import drive
drive.mount('/content/drive/', force_remount=True)

"""Friends/follower graph (directed)"""

LA = "/content/drive/MyDrive/4-SEMESTRE/AED2/projeto2/test_file"

"""Read adjacent list format and put it into a graph"""

G1 = nx.DiGraph(nx.read_adjlist(LA))

G1.is_directed()

"""Draw it just to see if it is real kkkkk"""

import matplotlib.pyplot as plt
nx.draw(G1)
plt.show()

"""Ok, its real, let's go

Fase 1
---

Fase 1: Nesta fase espera-se uma caracteriza ̧c ̃ao da LA, ou seja, espera-se que a rede possa
ser caracterizada apresentando-se as s seguintes caracter ́ısticas:<br>
(1) Tipo de rede (direcionada ou n ̃ao, ponderada ou n ̃ao);<br>
(2) N ́umero de n ́os e arestas;<br>
(3) Grau m ́aximo, m ́edio, m ́ınimo e m ́edio;<br>
(4) Densidade da rede;<br>
(5) N ́umero m ́edio de triˆangulos;<br>
(6) M ́edia do coeficiente de agrupamento (clustering);<br>
(7) Diˆametro da rede; e<br>
(8) N ́umero de componentes conexos fracos, al ́em do n ́umero de n ́os e arestas para o
maior destes componentes;<br>
(9) N ́umero de componentes conexos fortes, al ́em do n ́umero de n ́os e arestas para o
maior destes componentes.<br>

1) Rede: direcionada e não ponderada
"""

print('Nodes: ',G1.number_of_nodes())

"""2) Número de nós e arestas"""

print('Edges: ',G1.size())

"""3) Grau: máximo, médio, mínimo"""

# degree: The node degree is the number of edges adjacent to the node. Returns tuples of the form: (node, degree)
degree = list(G1.degree())  # sort asc and desc, and get the mean value -> TODO
degree.sort()
# in degree: The node in_degree is the number of edges pointing to the node.
# out degree: The node out_degree is the number of edges pointing out of the node.

def sort_list(List):
  return List.sort(key = lambda x: x[1])

"""4) Densidade"""

"""
Dado um grafo direcionado (é o caso desse trabalho), a densidade é: m/n(n-1)
https://networkx.org/documentation/networkx-1.10/reference/generated/networkx.classes.function.density.html

"""
nx.classes.function.density(G1)

"""Verificando"""

G1.size()/(G1.number_of_nodes()*(G1.number_of_nodes()-1))

"""5) Número de triângulos"""

# 5ver:
"""
https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=2ahUKEwikuIuB0-T0AhX_EbkGHbqdBZIQFnoECCUQAQ&url=https%3A%2F%2Fcs.stanford.edu%2F~rishig%2Fcourses%2Fref%2Fl1.pdf&usg=AOvVaw1eXod3fCnGdPgKaJHqkLXh
https://networkx.org/documentation/stable/reference/algorithms/generated/networkx.algorithms.cluster.triangles.html
https://networkx.org/documentation/networkx-1.2/reference/generated/networkx.triangles.html
"""

nx.triangles(G1) #ainda nn sei como resolver esse caso. Será que transformar a rede em uma rede não direcionada implicaria em algo para o calculo dos triangulos ?

"""6) Média do coeficiente de agrupamento (clustering)

"""

cof_clustering = nx.clustering(G1)
value=sum(cof_clustering.values())

media_clustering = value/G1.number_of_nodes()

print(media_clustering)

"""7) Diâmetro da rede"""

nx.diameter(G1)

"""8) Número de componentes conexos fracos, além do número de npos e arestas para o
maior destes componentes
"""

#ainda to pesquisando

"""9) Número de componentes conexos fortes, além do número de nós e arestas para o maior destes componentes."""

r=nx.number_strongly_connected_components(G1)
print(r) #eita
